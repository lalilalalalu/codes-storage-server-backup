LPGROUPS
{
    #dragonfly_router can be in one group only!
    DRAGONFLY_GRP
    {
        repetitions = "264";
        codes-store="1";
        test-checkpoint-client="3";
        lsm="1";
        resource="1";
	    modelnet_simplenet="1";
	    modelnet_dragonfly="4";
	    modelnet_dragonfly_router="1";
    }
    EXTERNAL_STR_GRP
    {
       repetitions="1";
       codes-external-store="1";
       modelnet_simplenet="1";
    }
}
PARAMS
{
    # ross params
    message_size="480";
    packet_size="4096";

    # modelnet params
    modelnet_order=("dragonfly","dragonfly_router","simplenet");
    modelnet_scheduler="fcfs"; 
    chunk_size="4096";
    num_routers="8";
    
    local_vc_size="16384";
    global_vc_size="32768";
    cn_vc_size="16384";

    local_bandwidth="5.25";
    global_bandwidth="4.7";
    cn_bandwidth="8.0";
    routing="adaptive";

    # simplenet params
    net_bw_mbps="1600.0";
    net_startup_ns="1000";
}

# triton server - implements forwarding and acking protocols based on placement
# algorithm 
codes-store
{
    # number of threads to multiplex transfers over
    req_threads = "4";
    # buffer size used by each thread
    thread_buf_sz = "1000000";
    # size of ram in bytes
    memory_size = "64000000000";
    # size of storage in bytes
    storage_size = "6400000000000";
    # burst buffer threshold in bytes
    bb_threshold = "20000000000";
}

# size of LP buffer
resource
{
    available="6464000000000";
}

# params taken from triton-fault-sim configs
lsm
{
    # table of metrics based on requset size
    # here metrics will be used for any request size
    # request size in bytes
    request_sizes   = ("0"); 

    # write/read rates in MB/s
    write_rates     = ("5700.0");
    read_rates      = ("5700.0");

    # seek latency in microseconds
    write_seeks     = ("2500.0");
    read_seeks      = ("2500.0");

    # latency of completing the smallest I/O request, in microseconds
    write_overheads = ("20.0");
    read_overheads  = ("20.0");
}

test-checkpoint-client
{
    workload_type = "checkpoint_io_workload"; 
    # checkpoint size in terabytes
    checkpoint_sz = "0.05";
    # checkpoint write bandwidth in GiB/s
    checkpoint_wr_bw = "5.25";
    # runtime of the app in hours
    chkpoint_iters = "1";
    # mean time to interrupt 
    mtti = "36.0";
}
